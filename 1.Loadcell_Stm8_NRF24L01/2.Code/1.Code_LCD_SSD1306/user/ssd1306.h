
#ifndef SSD1306_H
#define SSD1306_H 

#ifdef __cplusplus
extern C {
#endif

  #define  NORMAL       0
  #define  NEGATIVE     1
  #define  TEXTAREA     0
  #define  GRAPHICAREA  1
  #define  LEFTHALF     0
  #define  RIGHTHALF    1
  #define OLED_ad  0x3c   
  #define XOFSET   0
  #define false   0
  #define true    1
  #define bool char
  #define CMD    true
  #define DATA   false
  
  extern char I2CdataTX(unsigned char address, unsigned char *txbuf_in, int txnum);
  extern char ovwflg;
  extern unsigned char xpos;
  extern unsigned char ypos;
  extern unsigned char xofset;
  extern unsigned char gxstpt;
  extern unsigned char scrnbuf[];
  
  char initOLED(void);
  void displayON(char onflg);
  void invert(char mode);
  void WriteCharacter(char character, char neg);
  void SetYX(unsigned char row, unsigned char col);
  void SetPixelXY(unsigned char x, unsigned char y);
  void WriteString(char *characters, char neg);
  void clearOLED(char neg);
  void DrawFrame(char neg);
  void WriteExFont(char *data, char neg);
  
  
  void clearArea(unsigned char areakind, bool neg);
  void selectGarea(unsigned char side);
  void SetOvrWflg(bool a);
  void SetGraphicXY(unsigned char x, unsigned char y);
  void setPixel(unsigned char gx, unsigned char y, bool neg);
  void invPixel(unsigned char gx, unsigned char y);
  void drawLine(unsigned char gx1, unsigned char y1, unsigned char gx2, unsigned char y2, bool neg);
  void drawRect(unsigned char gx1, unsigned char y1, unsigned char gx2, unsigned char y2, bool neg);
  void drawRoundRect(unsigned char gx1, unsigned char y1, unsigned char gx2, unsigned char y2, bool neg);
  void drawCircle(unsigned char gx, unsigned char y, unsigned char radius, bool neg);
  void drawBitmap(unsigned char gx, unsigned char y, unsigned char *bitmap, unsigned char sx, unsigned char sy, bool neg);
  void refreshGraph(void);
  void SendData(unsigned char idata, char neg);
  char SendCmd(unsigned char cmd);
  void drawHLine(unsigned char x, unsigned char y, unsigned char l, char neg);
  void drawVLine(unsigned char x, unsigned char y, unsigned char l, char neg);
  
static const char 
ASCII[][5] = {
{0x00,0x00,0x00,0x00,0x00}, // 20  
{0x00,0x5F,0x00,0x00,0x00}, // 21 !
{0x00,0x07,0x00,0x07,0x00}, // 22 "
{0x14,0x7F,0x14,0x7F,0x14}, // 23 #
{0x24,0x2A,0x7F,0x2A,0x12}, // 24 $
{0x23,0x13,0x08,0x64,0x62}, // 25 %
{0x36,0x49,0x55,0x22,0x50}, // 26 &
{0x00,0x05,0x03,0x00,0x00}, // 27 '
{0x1C,0x22,0x41,0x00,0x00}, // 28 (
{0x41,0x22,0x1C,0x00,0x00}, // 29 )
{0x08,0x2A,0x1C,0x2A,0x08}, // 2a *
{0x08,0x08,0x3E,0x08,0x08}, // 2b +
{0xA0,0x60,0x00,0x00,0x00}, // 2c ,
{0x08,0x08,0x08,0x08,0x08}, // 2d -
{0x60,0x60,0x00,0x00,0x00}, // 2e .
{0x20,0x10,0x08,0x04,0x02}, // 2f /
{0x3E,0x51,0x49,0x45,0x3E}, // 30 0
{0x00,0x42,0x7F,0x40,0x00}, // 31 1
{0x62,0x51,0x49,0x49,0x46}, // 32 2
{0x22,0x41,0x49,0x49,0x36}, // 33 3
{0x18,0x14,0x12,0x7F,0x10}, // 34 4
{0x27,0x45,0x45,0x45,0x39}, // 35 5
{0x3C,0x4A,0x49,0x49,0x30}, // 36 6
{0x01,0x71,0x09,0x05,0x03}, // 37 7
{0x36,0x49,0x49,0x49,0x36}, // 38 8
{0x06,0x49,0x49,0x29,0x1E}, // 39 9
{0x00,0x36,0x36,0x00,0x00}, // 3a :
{0x00,0xAC,0x6C,0x00,0x00}, // 3b ;
{0x08,0x14,0x22,0x41,0x00}, // 3c <
{0x14,0x14,0x14,0x14,0x14}, // 3d =
{0x41,0x22,0x14,0x08,0x00}, // 3e >
{0x02,0x01,0x51,0x09,0x06}, // 3f ?
{0x32,0x49,0x79,0x41,0x3E}, // 40 @
{0x7E,0x09,0x09,0x09,0x7E}, // 41 A
{0x7F,0x49,0x49,0x49,0x36}, // 42 B
{0x3E,0x41,0x41,0x41,0x22}, // 43 C
{0x7F,0x41,0x41,0x22,0x1C}, // 44 D
{0x7F,0x49,0x49,0x49,0x41}, // 45 E
{0x7F,0x09,0x09,0x09,0x01}, // 46 F
{0x3E,0x41,0x41,0x51,0x72}, // 47 G
{0x7F,0x08,0x08,0x08,0x7F}, // 48 H
{0x41,0x7F,0x41,0x00,0x00}, // 49 I
{0x20,0x40,0x41,0x3F,0x01}, // 4a J
{0x7F,0x08,0x14,0x22,0x41}, // 4b K
{0x7F,0x40,0x40,0x40,0x40}, // 4c L
{0x7F,0x02,0x0C,0x02,0x7F}, // 4d M
{0x7F,0x04,0x08,0x10,0x7F}, // 4e N
{0x3E,0x41,0x41,0x41,0x3E}, // 4f O
{0x7F,0x09,0x09,0x09,0x06}, // 50 P
{0x3E,0x41,0x51,0x21,0x5E}, // 51 Q
{0x7F,0x09,0x19,0x29,0x46}, // 52 R
{0x26,0x49,0x49,0x49,0x32}, // 53 S
{0x01,0x01,0x7F,0x01,0x01}, // 54 T
{0x3F,0x40,0x40,0x40,0x3F}, // 55 U
{0x1F,0x20,0x40,0x20,0x1F}, // 56 V
{0x3F,0x40,0x38,0x40,0x3F}, // 57 W
{0x63,0x14,0x08,0x14,0x63}, // 58 X
{0x03,0x04,0x78,0x04,0x03}, // 59 Y
{0x61,0x51,0x49,0x45,0x43}, // 5a Z
{0x7F,0x41,0x41,0x00,0x00}, // 5b [
{0x02,0x04,0x08,0x10,0x20}, // 5c \  //
{0x41,0x41,0x7F,0x00,0x00}, // 5d ]
{0x04,0x02,0x01,0x02,0x04}, // 5e ^
{0x80,0x80,0x80,0x80,0x80}, // 5f _
{0x01,0x02,0x04,0x00,0x00}, // 60 `
{0x20,0x54,0x54,0x54,0x78}, // 61 a
{0x7F,0x48,0x44,0x44,0x38}, // 62 b
{0x38,0x44,0x44,0x28,0x00}, // 63 c
{0x38,0x44,0x44,0x48,0x7F}, // 64 d
{0x38,0x54,0x54,0x54,0x18}, // 65 e
{0x08,0x7E,0x09,0x02,0x00}, // 66 f
{0x18,0xA4,0xA4,0xA4,0x7C}, // 67 g
{0x7F,0x08,0x04,0x04,0x78}, // 68 h
{0x00,0x7D,0x00,0x00,0x00}, // 69 i
{0x80,0x84,0x7D,0x00,0x00}, // 6a j 
{0x7F,0x10,0x28,0x44,0x00}, // 6b k
{0x41,0x7F,0x40,0x00,0x00}, // 6c l
{0x7C,0x04,0x18,0x04,0x78}, // 6d m
{0x7C,0x08,0x04,0x7C,0x00}, // 6e n
{0x38,0x44,0x44,0x38,0x00}, // 6f o
{0xFC,0x24,0x24,0x18,0x00}, // 70 p
{0x18,0x24,0x24,0xFC,0x00}, // 71 q
{0x00,0x7C,0x08,0x04,0x00}, // 72 r
{0x48,0x54,0x54,0x24,0x00}, // 73 s
{0x04,0x7F,0x44,0x00,0x00}, // 74 t
{0x3C,0x40,0x40,0x7C,0x00}, // 75 u
{0x1C,0x20,0x40,0x20,0x1C}, // 76 v
{0x3C,0x40,0x30,0x40,0x3C}, // 77 w
{0x44,0x28,0x10,0x28,0x44}, // 78 x
{0x1C,0xA0,0xA0,0x7C,0x00}, // 79 y
{0x44,0x64,0x54,0x4C,0x44}, // 7a z
{0x08,0x36,0x41,0x00,0x00}, // 7b {
{0x00,0x7F,0x00,0x00,0x00}, // 7c |
{0x41,0x36,0x08,0x00,0x00}, // 7d }
{0x02,0x01,0x01,0x02,0x01}, // 7e ?
{0x02,0x05,0x05,0x02,0x00}  // 7f ?
};


      
#ifdef __cplusplus
}
#endif

#endif
